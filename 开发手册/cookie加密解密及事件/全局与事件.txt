全局与事件：
当设置了用户保持登录时，程序将有以下执行过程

加密：
1.
程序启动
if($this->hasEventHandler('onBeginRequest'))
	$this->onBeginRequest(new CEvent($this));//程序准备将要执行
	//即$this->raiseEvent('onBeginRequest',$event);//触发app对象到onBeginRequest事件
register_shutdown_function(array($this,'end'),0,false);
$this->processRequest();//执行程序
if($this->hasEventHandler('onEndRequest'))//程序已经执行完成
	$this->onEndRequest(new CEvent($this));
	//即$this->raiseEvent('onEndRequest',$event);//触发app对象到onEndRequest事件

2.
用户保持登录
CWebUser::saveToCookie($duration);
将用户登录数据交给安全类，做hash处理，并返回hash值作为cookie的值
$cookie->value=$app->getSecurityManager()->hashData(serialize($data));

$key=Yii::app()->getGlobalState(self::STATE_VALIDATION_KEY);
$this->detachEventHandler('onEndRequest',array($this,'saveGlobalState'));//绑定这个对象的方法到事件


观察者模式
1.使用特殊字条串作为触发点的事件名，并绑定一个对象。
2.在此事件之前创建那个对象类的继承对象，并指定一个新的方法和那个事件名。
3.在程序执行时，应该先执行2，从而向事件变量中记录了有一个对象绑定到了一个事件，并指定了一个对应的方法。
4.在程序执行到任意一个事先定义好的事件时就开始查找事件变量，是不是有一个事件名下有一个对象下有一个方法。
5.于是就调用并执行了那个方法。

整个过程，就如同最早的程序设计者为自己的程序预定了可拓展的部分，并指定应该拓展哪个对象，也叫勾子
至于要使用哪些方法就是用户自己的事情了，
好处是什么？
1.程序包需要定制不同版本时，其核心版本不需要修改代码，外部人员就可以将代码很空间的注入到核心中，
实现对核心代码的拓展，让原始开发者更专注于核心架构。
2.当程序中有一个行为一定得在程序执行完成时才触发，而那个行为在程序运行过程中就有机会展示
此时，我们可以使用事件机制将这个行为方法“延后处理”，即将方法体注入到程序结束事件即可。
上述bin文件生成方式就是用这个原理来实现的。















